# Google Cloud Build configuration for Medical Dashboard
# This file can be used for direct deployment from Google Cloud Source Repositories

steps:
  # Step 1: Create service account key file from secret
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "$$FIREBASE_SERVICE_ACCOUNT_KEY" > serviceAccountKey.json
    secretEnv: ['FIREBASE_SERVICE_ACCOUNT_KEY']

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/medical-dashboard:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/medical-dashboard:latest',
      '.'
    ]

  # Step 3: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/medical-dashboard:$BUILD_ID']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/medical-dashboard:latest']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'medical-dashboard',
      '--image', 'gcr.io/$PROJECT_ID/medical-dashboard:$BUILD_ID',
      '--region', '${_REGION}',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '1Gi',
      '--cpu', '1',
      '--timeout', '300',
      '--concurrency', '100',
      '--min-instances', '0',
      '--max-instances', '10',
      '--set-env-vars', 'FLASK_ENV=production,GEMINI_API_KEY=$$GEMINI_API_KEY,FIREBASE_PROJECT_ID=$PROJECT_ID,FIREBASE_SERVICE_ACCOUNT_KEY=serviceAccountKey.json,SECRET_KEY=$$SECRET_KEY,AUTO_REFRESH_INTERVAL=300000,MAX_RECORDS_PER_TABLE=1000,LOG_LEVEL=INFO'
    ]
    secretEnv: ['GEMINI_API_KEY', 'SECRET_KEY']

  # Step 5: Deploy to App Engine (optional, as fallback)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Update app.yaml with secrets
        sed -i "s/GEMINI_API_KEY: \".*\"/GEMINI_API_KEY: \"$$GEMINI_API_KEY\"/" app.yaml
        sed -i "s/SECRET_KEY: \".*\"/SECRET_KEY: \"$$SECRET_KEY\"/" app.yaml
        sed -i "s/FIREBASE_PROJECT_ID: \".*\"/FIREBASE_PROJECT_ID: \"$PROJECT_ID\"/" app.yaml
        
        # Deploy to App Engine
        gcloud app deploy app.yaml --quiet --promote
    secretEnv: ['GEMINI_API_KEY', 'SECRET_KEY']

  # Step 6: Clean up sensitive files
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        rm -f serviceAccountKey.json
        echo "Deployment completed successfully!"

# Define substitutions for customization
substitutions:
  _REGION: us-central1

# Specify which secrets to use
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/gemini-api-key/versions/latest
      env: 'GEMINI_API_KEY'
    - versionName: projects/$PROJECT_ID/secrets/secret-key/versions/latest
      env: 'SECRET_KEY'
    - versionName: projects/$PROJECT_ID/secrets/firebase-service-account-key/versions/latest
      env: 'FIREBASE_SERVICE_ACCOUNT_KEY'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100

# Build timeout
timeout: '1200s'

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/medical-dashboard:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/medical-dashboard:latest'