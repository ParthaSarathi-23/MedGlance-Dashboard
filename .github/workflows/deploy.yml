name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: medical-dashboard
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run basic syntax checks
      run: |
        python -m py_compile app.py
        python -m py_compile query_handler.py

    - name: Check for security issues
      run: |
        pip install bandit
        bandit -r . -f json -o security-report.json || echo "Security check completed"

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.json

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Create service account key file
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > serviceAccountKey.json

    - name: Build Docker image
      run: |
        docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .

    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --concurrency 100 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars="FLASK_ENV=production,GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }},FIREBASE_SERVICE_ACCOUNT_KEY=serviceAccountKey.json,SECRET_KEY=${{ secrets.SECRET_KEY }},AUTO_REFRESH_INTERVAL=300000,MAX_RECORDS_PER_TABLE=1000,LOG_LEVEL=INFO" \
          --tag latest

    - name: Get Cloud Run URL
      run: |
        echo "Deployment successful!"
        gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)'

    - name: Clean up
      if: always()
      run: |
        rm -f serviceAccountKey.json

  deploy-app-engine:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow this to fail if Cloud Run succeeds
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Create service account key file
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > serviceAccountKey.json

    - name: Update app.yaml with secrets
      run: |
        sed -i 's/GEMINI_API_KEY: ".*"/GEMINI_API_KEY: "${{ secrets.GEMINI_API_KEY }}"/' app.yaml
        sed -i 's/SECRET_KEY: ".*"/SECRET_KEY: "${{ secrets.SECRET_KEY }}"/' app.yaml
        sed -i 's/FIREBASE_PROJECT_ID: ".*"/FIREBASE_PROJECT_ID: "${{ secrets.FIREBASE_PROJECT_ID }}"/' app.yaml

    - name: Deploy to App Engine
      run: |
        gcloud app deploy app.yaml --quiet --promote

    - name: Clean up
      if: always()
      run: |
        rm -f serviceAccountKey.json
