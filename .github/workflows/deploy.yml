name: Deploy to Google Cloud Run
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: medical-dashboard
  REGION: us-central1
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    - name: Run basic syntax checks
      run: |
        python -m py_compile app.py
        python -m py_compile query_handler.py
    - name: Check for security issues
      run: |
        pip install bandit
        bandit -r . -f json -o security-report.json || echo "Security check completed"
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.json

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Authenticate to Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Set up Cloud SDK
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    # Validate project ID
    - name: Validate Project ID
      id: project-id
      run: |
        PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        PROJECT_ID=$(echo "$PROJECT_ID" | tr -d '[:space:]')
        if [[ ! "$PROJECT_ID" =~ ^[a-z0-9-]+$ ]]; then
          echo "Invalid project ID format: $PROJECT_ID"
          exit 1
        fi
        echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT
        echo "Using project ID: $PROJECT_ID"

    # Create Artifact Registry repository (one-time, will skip if exists)
    - name: Create Artifact Registry repository
      run: |
        gcloud artifacts repositories create medical-dashboard \
          --repository-format=docker \
          --location=us-central1 \
          --description="Medical Dashboard Docker Repository" || echo "Repository already exists"

    # Configure Docker for Artifact Registry
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev

    # Create service account key file
    - name: Create service account key file
      run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > serviceAccountKey.json

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login to Artifact Registry
    - name: Login to Artifact Registry
      uses: docker/login-action@v3
      with:
        registry: us-central1-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}

    # Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          us-central1-docker.pkg.dev/${{ steps.project-id.outputs.project-id }}/medical-dashboard/medical-dashboard:latest
          us-central1-docker.pkg.dev/${{ steps.project-id.outputs.project-id }}/medical-dashboard/medical-dashboard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Deploy to Cloud Run
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy medical-dashboard \
          --image us-central1-docker.pkg.dev/${{ steps.project-id.outputs.project-id }}/medical-dashboard/medical-dashboard:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --set-env-vars="FLASK_ENV=production,GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }},FIREBASE_SERVICE_ACCOUNT_KEY=serviceAccountKey.json,SECRET_KEY=${{ secrets.SECRET_KEY }}"

    # Get Cloud Run URL
    - name: Get Cloud Run URL
      run: |
        URL=$(gcloud run services describe medical-dashboard --platform managed --region us-central1 --format 'value(status.url)')
        echo "Service URL: $URL"

    # Clean up
    - name: Clean up
      if: always()
      run: rm -f serviceAccountKey.json
